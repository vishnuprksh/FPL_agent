"""
Analysis Report UI page for displaying player performance predictions.

This page shows predictions generated by linear regression models based on
fixture difficulty ratings and recent match performance.
"""

from dash import html, dcc, dash_table, callback
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output, State
import pandas as pd
from datetime import datetime

from fpl_agent.calculation import generate_all_predictions, get_predictions_summary


def analysis_report_layout():
    """Create the layout for the analysis report page."""
    
    # Try to get existing predictions to display
    try:
        predictions_df = get_predictions_summary()
        predictions_exist = len(predictions_df) > 0
        
        if predictions_exist:
            last_updated = "Data available"
            table_data = predictions_df.to_dict('records')
        else:
            last_updated = "No predictions available - click 'Generate Predictions' to create them"
            table_data = []
    except Exception as e:
        predictions_exist = False
        last_updated = f"Error loading predictions: {str(e)}"
        table_data = []
    
    return dbc.Container([
        # Header section
        dbc.Row([
            dbc.Col([
                html.H2("Player Performance Analysis & Predictions", className="text-center mb-4"),
                html.P([
                    "This analysis uses linear regression to predict player performance for the next 3 gameweeks (currently GW6, GW7, GW8) in the 2025-26 season. ",
                    "The model uses fixture difficulty and match sequence from recent gameweeks (GW1-GW5) as training data, ",
                    "assuming a fixture difficulty rating (FDR) of 3 for all upcoming matches."
                ], className="text-muted mb-4")
            ])
        ]),
        
        # Control section
        dbc.Row([
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.H5("Generate New Predictions", className="card-title"),
                        html.P("Click the button below to generate fresh predictions for all players using their recent match data."),
                        dbc.Button(
                            "Generate Predictions", 
                            id="generate-predictions-btn", 
                            color="primary", 
                            size="lg",
                            className="me-2"
                        ),
                        dbc.Button(
                            "Refresh Table", 
                            id="refresh-table-btn", 
                            color="secondary", 
                            outline=True,
                            size="lg"
                        ),
                        html.Div(id="generation-status", className="mt-3")
                    ])
                ])
            ], width=12)
        ], className="mb-4"),
        
        # Status section
        dbc.Row([
            dbc.Col([
                html.P(f"Status: {last_updated}", id="table-status", className="text-muted mb-3")
            ])
        ]),
        
        # Table section
        dbc.Row([
            dbc.Col([
                html.Div(
                    id="predictions-table-container",
                    children=[
                        dash_table.DataTable(
                            id='predictions-table',
                            data=table_data,
                            columns=[
                                {'name': 'Player Code', 'id': 'player_code', 'type': 'numeric'},
                                {'name': 'Player', 'id': 'player_name', 'type': 'text'},
                                {'name': 'Team', 'id': 'team_name', 'type': 'text'},
                                {'name': 'GW1 Pred', 'id': 'predicted_gw1_points', 'type': 'numeric', 'format': {'specifier': '.1f'}},
                                {'name': 'GW2 Pred', 'id': 'predicted_gw2_points', 'type': 'numeric', 'format': {'specifier': '.1f'}},
                                {'name': 'GW3 Pred', 'id': 'predicted_gw3_points', 'type': 'numeric', 'format': {'specifier': '.1f'}},
                                {'name': 'Total Predicted', 'id': 'total_predicted_points', 'type': 'numeric', 'format': {'specifier': '.1f'}},
                                {'name': 'Model R²', 'id': 'model_r2_score', 'type': 'numeric', 'format': {'specifier': '.3f'}},
                                {'name': 'Matches Used', 'id': 'matches_used', 'type': 'numeric'},
                            ],
                            sort_action='native',
                            sort_by=[{'column_id': 'total_predicted_points', 'direction': 'desc'}],
                            page_size=25,
                            style_cell={
                                'textAlign': 'left',
                                'padding': '10px',
                                'fontFamily': 'Arial'
                            },
                            style_header={
                                'backgroundColor': 'rgb(230, 230, 230)',
                                'fontWeight': 'bold'
                            },
                            style_data_conditional=[
                                {
                                    'if': {'column_id': 'total_predicted_points'},
                                    'backgroundColor': 'rgb(248, 249, 250)',
                                    'fontWeight': 'bold'
                                },
                                {
                                    'if': {
                                        'filter_query': '{total_predicted_points} > 15',
                                        'column_id': 'total_predicted_points'
                                    },
                                    'backgroundColor': 'rgb(212, 237, 218)',
                                    'color': 'rgb(21, 87, 36)',
                                },
                                {
                                    'if': {
                                        'filter_query': '{model_r2_score} < 0.1',
                                        'column_id': 'model_r2_score'
                                    },
                                    'backgroundColor': 'rgb(248, 215, 218)',
                                    'color': 'rgb(114, 28, 36)',
                                }
                            ]
                        )
                    ] if predictions_exist or table_data else [
                        dbc.Alert("No predictions available. Click 'Generate Predictions' to create them.", color="info")
                    ]
                )
            ])
        ]),
        
        # Information section
        dbc.Row([
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.H6("How to Interpret the Results", className="card-title"),
                        html.Ul([
                            html.Li("GW1-3 Pred: Predicted points for each of the next 3 gameweeks"),
                            html.Li("Total Predicted: Sum of all 3 predicted gameweek scores"),
                            html.Li("Model R²: How well the model fits the data (higher is better, max 1.0)"),
                            html.Li("Matches Used: Number of recent matches used to train the model (now uses 10)"),
                            html.Li("Player Code: Unique FPL identifier for each player"),
                            html.Li("Green highlighting: High predicted total points (>15)"),
                            html.Li("Red highlighting: Low model reliability (R² < 0.1)"),
                            html.Li("Model uses both fixture difficulty and match sequence as input features")
                        ])
                    ])
                ])
            ])
        ], className="mt-4")
    ], fluid=True)


@callback(
    [Output('generation-status', 'children'),
     Output('predictions-table-container', 'children'),
     Output('table-status', 'children')],
    [Input('generate-predictions-btn', 'n_clicks'),
     Input('refresh-table-btn', 'n_clicks')],
    prevent_initial_call=True
)
def handle_prediction_actions(generate_clicks, refresh_clicks):
    """Handle prediction generation and table refresh actions."""
    
    from dash import callback_context
    
    if not callback_context.triggered:
        return "", [], "No action taken"
    
    triggered_id = callback_context.triggered[0]['prop_id'].split('.')[0]
    
    if triggered_id == 'generate-predictions-btn':
        # Generate new predictions
        try:
            status_msg = dbc.Alert("Generating predictions... This may take a moment.", color="info", className="mb-0")
            
            # Run the prediction generation
            num_predictions = generate_all_predictions()
            
            if num_predictions > 0:
                success_msg = dbc.Alert(
                    f"Successfully generated predictions for {num_predictions} players!", 
                    color="success", 
                    className="mb-0"
                )
                
                # Get the updated predictions
                predictions_df = get_predictions_summary()
                table_data = predictions_df.to_dict('records')
                
                table_component = [
                    dash_table.DataTable(
                        id='predictions-table',
                        data=table_data,
                        columns=[
                            {'name': 'Player Code', 'id': 'player_code', 'type': 'numeric'},
                            {'name': 'Player', 'id': 'player_name', 'type': 'text'},
                            {'name': 'Team', 'id': 'team_name', 'type': 'text'},
                            {'name': 'GW1 Pred', 'id': 'predicted_gw1_points', 'type': 'numeric', 'format': {'specifier': '.1f'}},
                            {'name': 'GW2 Pred', 'id': 'predicted_gw2_points', 'type': 'numeric', 'format': {'specifier': '.1f'}},
                            {'name': 'GW3 Pred', 'id': 'predicted_gw3_points', 'type': 'numeric', 'format': {'specifier': '.1f'}},
                            {'name': 'Total Predicted', 'id': 'total_predicted_points', 'type': 'numeric', 'format': {'specifier': '.1f'}},
                            {'name': 'Model R²', 'id': 'model_r2_score', 'type': 'numeric', 'format': {'specifier': '.3f'}},
                            {'name': 'Matches Used', 'id': 'matches_used', 'type': 'numeric'},
                        ],
                        sort_action='native',
                        sort_by=[{'column_id': 'total_predicted_points', 'direction': 'desc'}],
                        page_size=25,
                        style_cell={
                            'textAlign': 'left',
                            'padding': '10px',
                            'fontFamily': 'Arial'
                        },
                        style_header={
                            'backgroundColor': 'rgb(230, 230, 230)',
                            'fontWeight': 'bold'
                        },
                        style_data_conditional=[
                            {
                                'if': {'column_id': 'total_predicted_points'},
                                'backgroundColor': 'rgb(248, 249, 250)',
                                'fontWeight': 'bold'
                            },
                            {
                                'if': {
                                    'filter_query': '{total_predicted_points} > 15',
                                    'column_id': 'total_predicted_points'
                                },
                                'backgroundColor': 'rgb(212, 237, 218)',
                                'color': 'rgb(21, 87, 36)',
                            },
                            {
                                'if': {
                                    'filter_query': '{model_r2_score} < 0.1',
                                    'column_id': 'model_r2_score'
                                },
                                'backgroundColor': 'rgb(248, 215, 218)',
                                'color': 'rgb(114, 28, 36)',
                            }
                        ]
                    )
                ]
                
                status_update = f"Predictions updated - {len(predictions_df)} players with predictions (Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')})"
                
                return success_msg, table_component, status_update
            
            else:
                error_msg = dbc.Alert("No predictions could be generated. Check that player history data is available.", color="warning", className="mb-0")
                return error_msg, [dbc.Alert("No predictions available.", color="info")], "No predictions generated"
                
        except Exception as e:
            error_msg = dbc.Alert(f"Error generating predictions: {str(e)}", color="danger", className="mb-0")
            return error_msg, [dbc.Alert("Error loading predictions.", color="danger")], f"Error: {str(e)}"
    
    elif triggered_id == 'refresh-table-btn':
        # Refresh the table with existing data
        try:
            predictions_df = get_predictions_summary()
            
            if len(predictions_df) > 0:
                table_data = predictions_df.to_dict('records')
                
                table_component = [
                    dash_table.DataTable(
                        id='predictions-table',
                        data=table_data,
                        columns=[
                            {'name': 'Player Code', 'id': 'player_code', 'type': 'numeric'},
                            {'name': 'Player', 'id': 'player_name', 'type': 'text'},
                            {'name': 'Team', 'id': 'team_name', 'type': 'text'},
                            {'name': 'GW1 Pred', 'id': 'predicted_gw1_points', 'type': 'numeric', 'format': {'specifier': '.1f'}},
                            {'name': 'GW2 Pred', 'id': 'predicted_gw2_points', 'type': 'numeric', 'format': {'specifier': '.1f'}},
                            {'name': 'GW3 Pred', 'id': 'predicted_gw3_points', 'type': 'numeric', 'format': {'specifier': '.1f'}},
                            {'name': 'Total Predicted', 'id': 'total_predicted_points', 'type': 'numeric', 'format': {'specifier': '.1f'}},
                            {'name': 'Model R²', 'id': 'model_r2_score', 'type': 'numeric', 'format': {'specifier': '.3f'}},
                            {'name': 'Matches Used', 'id': 'matches_used', 'type': 'numeric'},
                        ],
                        sort_action='native',
                        sort_by=[{'column_id': 'total_predicted_points', 'direction': 'desc'}],
                        page_size=25,
                        style_cell={
                            'textAlign': 'left',
                            'padding': '10px',
                            'fontFamily': 'Arial'
                        },
                        style_header={
                            'backgroundColor': 'rgb(230, 230, 230)',
                            'fontWeight': 'bold'
                        },
                        style_data_conditional=[
                            {
                                'if': {'column_id': 'total_predicted_points'},
                                'backgroundColor': 'rgb(248, 249, 250)',
                                'fontWeight': 'bold'
                            },
                            {
                                'if': {
                                    'filter_query': '{total_predicted_points} > 15',
                                    'column_id': 'total_predicted_points'
                                },
                                'backgroundColor': 'rgb(212, 237, 218)',
                                'color': 'rgb(21, 87, 36)',
                            },
                            {
                                'if': {
                                    'filter_query': '{model_r2_score} < 0.1',
                                    'column_id': 'model_r2_score'
                                },
                                'backgroundColor': 'rgb(248, 215, 218)',
                                'color': 'rgb(114, 28, 36)',
                            }
                        ]
                    )
                ]
                
                refresh_msg = dbc.Alert("Table refreshed successfully!", color="success", className="mb-0", dismissable=True)
                status_update = f"Table refreshed - {len(predictions_df)} predictions loaded"
                
                return refresh_msg, table_component, status_update
            else:
                return "", [dbc.Alert("No predictions available. Generate predictions first.", color="info")], "No predictions found"
                
        except Exception as e:
            error_msg = dbc.Alert(f"Error refreshing table: {str(e)}", color="danger", className="mb-0")
            return error_msg, [dbc.Alert("Error loading predictions.", color="danger")], f"Error: {str(e)}"
    
    return "", [], "Unknown action"